{
  "version": 3,
  "sources": ["../../bin/live-reload.js", "../../node_modules/.pnpm/@finsweet+ts-utils@0.40.0/node_modules/@finsweet/ts-utils/dist/webflow/getPublishDate.js", "../../src/utils/get-html-element.ts"],
  "sourcesContent": ["new EventSource(`${SERVE_ORIGIN}/esbuild`).addEventListener(\"change\", () => location.reload());\n", "/**\n * Extracts the publish date of a Webflow site\n * @returns A Date object, if found.\n * @param page The page to get the publish date from. Defaults to the current page.\n */\nexport const getPublishDate = (page = document) => {\n    const publishDatePrefix = 'Last Published:';\n    for (const node of page.childNodes) {\n        if (node.nodeType === Node.COMMENT_NODE && node.textContent?.includes(publishDatePrefix)) {\n            const publishDateValue = node.textContent.trim().split(publishDatePrefix)[1];\n            if (publishDateValue)\n                return new Date(publishDateValue);\n        }\n    }\n};\n", "/**\r\n * Configuration options for HTML element selection utilities.\r\n */\r\ntype GetHtmlElementProps = {\r\n  /** CSS selector string to target the desired element(s) */\r\n  selector: string;\r\n  /** Optional parent element to scope the search within. Defaults to document if not provided */\r\n  parent?: HTMLElement;\r\n  /** Logging level for when elements are not found. Set to false to disable logging */\r\n  log?: \"debug\" | \"error\" | false;\r\n};\r\n\r\n/**\r\n * Safely retrieves a single HTML element using a CSS selector with optional logging.\r\n *\r\n * @template TElement - The specific HTML element type to return (extends HTMLElement)\r\n * @param options - Configuration object for element selection\r\n * @param options.selector - CSS selector string to target the desired element\r\n * @param options.parent - Optional parent element to scope the search within\r\n * @param options.log - Logging level when element is not found (\"debug\", \"error\", or false)\r\n * @returns The found HTML element cast to the specified type, or null if not found\r\n *\r\n * @example\r\n * ```typescript\r\n * // Get a button element with error logging\r\n * const button = getHtmlElement<HTMLButtonElement>({\r\n *   selector: '.submit-btn',\r\n *   log: 'error'\r\n * });\r\n *\r\n * // Get an element within a specific parent with debug logging\r\n * const input = getHtmlElement<HTMLInputElement>({\r\n *   selector: 'input[type=\"email\"]',\r\n *   parent: formElement,\r\n *   log: 'debug'\r\n * });\r\n *\r\n * // Silent mode - no logging\r\n * const element = getHtmlElement({\r\n *   selector: '.optional-element',\r\n *   log: false\r\n * });\r\n * ```\r\n */\r\nexport const getHtmlElement = <TElement extends HTMLElement = HTMLElement>({\r\n  selector,\r\n  parent,\r\n  log = \"debug\",\r\n}: GetHtmlElementProps): TElement | null => {\r\n  const targetElement = (parent || document).querySelector<TElement>(selector);\r\n\r\n  if (targetElement === null) {\r\n    if (log === false) return null;\r\n    const consoleMethod = log === \"debug\" ? console.debug : console.error;\r\n    consoleMethod(\r\n      `${log.toUpperCase()}: Element with selector \"${selector}\" not found in ${\r\n        parent !== undefined ? \"the specified parent element:\" : \"the document.\"\r\n      }`,\r\n      parent\r\n    );\r\n    return null;\r\n  }\r\n\r\n  return targetElement;\r\n};\r\n\r\n/**\r\n * Safely retrieves multiple HTML elements using a CSS selector with optional logging.\r\n *\r\n * @template TElement - The specific HTML element type for array items (extends HTMLElement)\r\n * @param options - Configuration object for element selection\r\n * @param options.selector - CSS selector string to target the desired elements\r\n * @param options.parent - Optional parent element to scope the search within\r\n * @param options.log - Logging level when no elements are found (\"debug\", \"error\", or false)\r\n * @returns Array of found HTML elements cast to the specified type, or null if none found\r\n *\r\n * @example\r\n * ```typescript\r\n * // Get all list items with debug logging\r\n * const listItems = getMultipleHtmlElements<HTMLLIElement>({\r\n *   selector: 'li.item',\r\n *   log: 'debug'\r\n * });\r\n *\r\n * // Get all inputs within a form with error logging\r\n * const inputs = getMultipleHtmlElements<HTMLInputElement>({\r\n *   selector: 'input',\r\n *   parent: formElement,\r\n *   log: 'error'\r\n * });\r\n *\r\n * // Silent mode - no logging when elements not found\r\n * const buttons = getMultipleHtmlElements<HTMLButtonElement>({\r\n *   selector: '.action-btn',\r\n *   log: false\r\n * });\r\n * ```\r\n */\r\nexport const getMultipleHtmlElements = <TElement extends HTMLElement = HTMLElement>({\r\n  selector,\r\n  parent,\r\n  log = \"debug\",\r\n}: GetHtmlElementProps): TElement[] | null => {\r\n  const targetElements = Array.from((parent || document).querySelectorAll<TElement>(selector));\r\n\r\n  if (targetElements.length === 0) {\r\n    if (log === false) return null;\r\n    const consoleMethod = log === \"debug\" ? console.debug : console.error;\r\n    consoleMethod(\r\n      `${log.toUpperCase()}: No elements found with selector \"${selector}\" in ${\r\n        parent !== undefined ? \"the specified parent element:\" : \"the document.\"\r\n      }`,\r\n      parent\r\n    );\r\n    return null;\r\n  }\r\n\r\n  return targetElements;\r\n};\r\n"],
  "mappings": ";AAAA,IAAI,YAAY,GAAG,uBAAY,UAAU,EAAE,iBAAiB,UAAU,MAAM,SAAS,OAAO,CAAC;;;ACKtF,IAAM,iBAAiB,CAAC,OAAO,aAAa;AAC/C,QAAM,oBAAoB;AAC1B,aAAW,QAAQ,KAAK,YAAY;AAChC,QAAI,KAAK,aAAa,KAAK,gBAAgB,KAAK,aAAa,SAAS,iBAAiB,GAAG;AACtF,YAAM,mBAAmB,KAAK,YAAY,KAAK,EAAE,MAAM,iBAAiB,EAAE,CAAC;AAC3E,UAAI;AACA,eAAO,IAAI,KAAK,gBAAgB;AAAA,IACxC;AAAA,EACJ;AACJ;;;ACoFO,IAAM,0BAA0B,CAA6C;AAAA,EAClF;AAAA,EACA;AAAA,EACA,MAAM;AACR,MAA8C;AAC5C,QAAM,iBAAiB,MAAM,MAAM,UAAU,UAAU,iBAA2B,QAAQ,CAAC;AAE3F,MAAI,eAAe,WAAW,GAAG;AAC/B,QAAI,QAAQ,MAAO,QAAO;AAC1B,UAAM,gBAAgB,QAAQ,UAAU,QAAQ,QAAQ,QAAQ;AAChE;AAAA,MACE,GAAG,IAAI,YAAY,CAAC,sCAAsC,QAAQ,QAChE,WAAW,SAAY,kCAAkC,eAC3D;AAAA,MACA;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAEA,SAAO;AACT;",
  "names": []
}
